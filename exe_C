1 - Criar um arquivo com conteúdo

Crie um arquivo com nome 'exercicio.txt' dentro do diretório ‘/home/exercicio/’ com o seguinte conteúdo:

#include <iostream>
#include <fstream>
using namespace std;

int main () {
  ofstream myfile ("exercicio.txt");
  if (myfile.is_open()) {
    myfile << "teste\n";
    myfile << "1teste\n";
    myfile << "brasil\n";
    myfile << "america\n";                         //ok ----- versao melhor
    myfile << "john\n";
    myfile << "tete\n";
    myfile << "2_teste\n";
    myfile << "abelha\n";
    myfile << "1_teste\n";
    myfile << "crase\n";
    myfile.close();
  }
  else cout << "Impossível abrir o ficheiro";
  return 0;
}

--------------------------------------------------
2 - Copiar o conteúdo de um arquivo com algumas exceções

Copie o conteúdo do arquivo 'exercício.txt', com exceção das linhas que começarem com 'Teste' para o arquivo /home/exercicio/novo.txt.

Dica: 
leia sobre o find e string::npos.

#include <stdio.h>
#include <stdlib.h>

int main(){
  FILE *novo, *velho;
  novo=fopen("novo.txt","w");
  velho=fopen("exercicio.txt","r");
    
  if (novo==NULL || velho==NULL){                  //OBS!!! melhorar    >> c !! c++ ---  funciona
    printf("Erro de abertura\n");
    system("pause");
    exit(1);
    }
  char letra;
  while( (letra = fgetc(velho)) != EOF ){
    if(letra =='T')letra='U';
    fprintf(novo, "%c", letra);
  }
  fclose(velho);
  fclose(novo);
  return 0;
}
------------------------------- obs pega ultima linha d arquivo ----
#include <string>
using namespace std;

int main () {
  string line;
  ifstream myfile ("exercicio.txt");                     // ok ----
  if (myfile.is_open())
  {
    while (! myfile.eof() )
    {
      getline (myfile,line);
      cout << line << endl;
    }
    myfile.close();
  }

  else cout << "ficheiro não encontrado.."; 

  return 0;
}

-------- P2 ------------------------------
#include <fstream>
#include <string>
#include <stdio.h>
#include <iostream>

using namespace std;

int main(){

  string nome;
  ifstream arquivoLeitura;
  arquivoLeitura.open("novo.txt");
    
  string palavraAtual;                               // funciona - a melhorar ---------
  string textoParaGravar;
    
  while (arquivoLeitura.good()) {
      
    getline(arquivoLeitura, palavraAtual);
    if(!("teste" == palavraAtual.substr(0,5))){
    textoParaGravar+=palavraAtual+"\n";
    }
  }
    
  std::cout << textoParaGravar << std::endl; 
  arquivoLeitura.close();
  return 0;
}
----------------------------- P3 ------------------------------
#include <fstream>
#include <string>

int main()
{
    auto input = std::ifstream("exercicio.txt");
    auto output = std::ofstream("novo.txt");
                                                          // ok - versao melhor 
    std::string msg;
    while (std::getline(input, msg))
    {
        if ( msg.find("teste") != std::string::npos )
            continue;
        output << msg << std::endl;
    }
}


-------------------------falta-----------------------------------

3 - Verificar se determinado arquivo existe

Testar se um determinado arquivo existe, passando o nome do arquivo por parâmetro em linha de comando, informar na saída do programa
‘Arquivo xxx existe’ ou ‘Arquivo xxx não existe’.

#include <fstream>
#include <string>

int main(int argc,char *argv[]){
 
FILE *fp;

fp=fopen("nov0o.txt","r");                             // ok  - so por nome do arquivo - conctenar ---------------------------------

if(fp){
    printf("Arquivo existe!!\n");
    fclose(fp);
}else{
    printf("Arquivo Não exite.?");
}
return(0);
}

Dica: 
leia sobre argc e argv.
---------------------------------------------------------------
4 - Verificar se determinado diretório existe

Testar se um determinado diretório existe passando o nome do diretório por parâmetro em linha de comando, 
informar na saída do programa ‘Diretório xxx existe’ ou ‘Diretório xxx não existe’.

#include <stdio.h>
#include <stdlib.h>
#include <iostream>

using namespace std;

int main(int argc, char *argv[]) {
FILE *fa;
// Abrindo arquivo 
fa = fopen(argv[1],"r");
// verificar se arquivo existe 
if (fa == NULL){
  cout << "O diretorio " << argv[1] << " não existe " << endl;
  exit(0);
}else{
  cout << "O diretorio " << argv[1] << " não  existe " << endl;
}
}
-----------------------------------------------------------------
5 - Ler um arquivo e imprimir o conteúdo em tela

Abrir um arquivo e imprimir o conteúdo dele na tela. 
Passar por parâmetro em linha de comando o nome do arquivo e o número de linhas que deseja imprimir.

Dica: 
leia sobre cout.
----------------------------------------
6 - Listar determinadas informações referentes as rotas de rede
Listar as rotas de rede do servidor usando o comando ‘route -n’. 
Deverá mostrar como resultado na tela somente os seguintes campos: Destino, Máscara e Interface.
Dica: 
leia sobre o find e string::npos e substr e popen.

#include <fstream>
#include <vector>
#include<stdio.h>                           // codigo 1  - observar formato
#include <iostream>
#include <map>
#include <iterator>

using namespace std;

vector<string> explode(string separador, string frase) {      // explode --- > função global

  int prox = separador.size();                                // separador.tamanho- > 

  vector<string> ret;

  string::size_type ini, fim;                                 // tamnaho tipo

  ini = fim = 0;

  string t; // var obs!!
  string t1; //obs!!

  while (true) {

    fim = frase.find(separador, ini);                           // encontrar

    if (fim == string::npos) {

      t = frase.substr(ini, frase.size() - ini);

      if (t.size() > 0){

        ret.push_back(t);                                       // pusch_alimenta o vetor 
      }

      break;

    }

    t = frase.substr(ini, fim - ini);   // t2                        // obs!!

    if (t.size() > 0){

      ret.push_back(t);  // t2                                        // empurrar
    }

    ini = fim + prox;

  }

  return ret;

}

//Listar as rotas de rede do servidor usando o comando ‘route -n’. -------------------------------------

int main(int argc,char *argv[]){

  vector<string> sep;

  FILE *arqTxt;

  arqTxt = popen("route -n","r");

  char textChar[1024];

  string texto;
  
  while (fgets(textChar,sizeof(textChar)-1,arqTxt)!=NULL){

    texto = textChar;

    sep = explode(" " , texto); // obs

    for (int i = 0; i < sep.size(); i++){

      cout << sep[i] << endl;

    } 

  }

  return 0;

}

// Codigo 2 -------------------------------------------- abaixo


//Função para quebrar texto

vector<string> explode(string separador, string frase) {

int prox = separador.size();

vector<string> ret;

string::size_type ini, fim;

ini = fim = 0;

string aux = frase.substr(ini, frase.size() - ini);

string aux2 = frase.substr(ini, fim - ini);

while (true) {

fim = frase.find(separador, ini);

if (fim == string::npos) {

if(aux.size()>0)ret.push_back(aux);

break;

}

if(aux2.size()>0)ret.push_back(aux2); // t2

ini = fim + prox;

}

return ret;

}





int main(int argc, char *argv[]){

//Cria ponteiro de texto.

FILE *arqTxt;

//Salva o resultado do comando em terminal no ponteiro.

arqTxt = popen("route -n", "r");



//Cria linha de armazenamento temporario e final para o loop.

char textChar[1024];

string texto;



//Salva o texto do terminal em String.

while (fgets(textChar, sizeof(textChar)-1, arqTxt)!=NULL){

texto = textChar;

vector<string> sep = explode (" ", texto);// obs

for(int i = 0; i < sep.size(); i++){

//cout << sep[2]; //FILTRAR!!!, colocar a coluna

cout << sep[i] << endl;

}

cout << "Fim da linha" << endl;

}



//Explode o texto extraido.



return 0;

}



------------------------------------------------------
7 - 
Listar informações de usuário, código e grupo dos usuários do linux

Com base nas informações do arquivo ‘/etc/passwd’, pegar o código do grupo de cada usuário e busca-lo no arquivo ‘/etc/group’.
O resultado deve ser escrito no arquivo ‘/home/exercicio/resultado.txt’ no formato ‘usuario -> codigo -> grupo’.

Observação:
Não utilizar os comandos do linux para trazer as informações.
A ideia é abrir os arquivos mencionados utilizando fstream e buscar pelas informações manualmente.

#include <fstream>
#include <vector>
#include<stdio.h>                           
#include <iostream>
#include <map>
#include <iterator>

using namespace std;

vector<string> explode(string separador, string frase) {      // explode --- > função - global -----------****************

  int prox = separador.size();                                // separador.tamanho- > 
  vector<string> ret;                                         // vetor 
  string::size_type ini, fim;                                 // tamnaho tipo

  ini = fim = 0;
  string t;               // var obs!!

  while (true) {         // looop 

    fim = frase.find(separador, ini);                           // encontrar
    if (fim == string::npos) {                                 // classe
      t = frase.substr(ini, frase.size() - ini);               // size.tamanho
      if (t.size() > 0){
        ret.push_back(t);                                       // pusch_alimenta o vetor 
      }
      break;
    }
    t = frase.substr(ini, fim - ini);   
    if (t.size() > 0){                               // .tamanho
      ret.push_back(t);                              // empurrar
    }
    ini = fim + prox;   // ++ soma  
  }
  return ret;
}

int main(){      // main -------------------------------------------------------------------------------------

  fstream arqTxt; 
  fstream arqTxt1;
  fstream arqTxt2;                                                     // vars !! 
  string textoGravado;
  string subString;
  
  arqTxt.open("/etc/passwd", fstream::in);                         // abrir arquivo  in - dentro- leitura
  arqTxt1.open("/etc/group", fstream::in);                        // abrir arquivo  in - dentro - leitura
  arqTxt2.open("resultado.txt", fstream::out);         // criar arquivo  in - dentro , out - fora   // ios - app acrescenta conteudo ++ no txt  

  vector<string> sep;                     // vetor --- obsss!!!
  vector<string> sep1; 

  while (arqTxt.good()){    // vai ate fim do arquivo 
  //while (!arqTxt.eof()){              //EOF => É uma definição macro do tipo int que se expande para uma expressão constante integral negativa(geralmente -1).
    getline(arqTxt, textoGravado);     // pegar linha 

   //subString = textoGravado.substr(textoGravado.find(":x:")+ 3 );   // find - encontrar ":x;"

   //std::cout << subString << std::endl;
  
    sep = explode(":",textoGravado);          // função 
    cout  << sep[0],"/n"; // obs!!!
    
    //for(int i = 0; i < sep.size(); i++){       // obs!!!!!
      //arqTxt1 << arqTxt;
      //arqTxt2 << arqTxt1;
    //}
    //cout  << sep[0]; // obs!!!
    //cout  << endl;

    sep.clear();         // claro
    cout << endl;        // pular linha 
  }

  arqTxt.close();
  arqTxt1.close();
  arqTxt2.close();       // fechar arquivos 

  return 0;

}

--------------------------- outra versão ------------------------------

#include <fstream>
#include <vector>
#include<stdio.h>                           
#include <iostream>
#include <map>
#include <iterator>

using namespace std;

int main(){

	fstream arqTxt;
	fstream arqTxtResult;
	fstream arqTxtGroup;
	fstream arqTxtGravado;
	fstream codGrupo;
	fstream conteudoGroup;

	fopen("resultado.txt", "a");

	arqTxt.open("/etc/passwd", fstream::in);

	while (!arqTxt.eof()){
		
		getline(arqTxt,codGrupo);
		
		if(!codGrupo.empty(){
			codGrupo = codGrupo.substr(codGrupo.find(":x:")+ 3);
			codGrupo = codGrupo.substr(0, codGrupo.find(":"));
		}
		
		arqTxt.open("/etc/group", fstream::in);
		
		while (!arqTxtGroup.eof()){
			
			getline(arqTxtGroup,conteudoGroup);
			
			if(conteudoGroup.empty()){
				conteudoGroup = conteudoGroup.substr(conteudoGroup.find(":x:")+ 3);
				conteudoGroup = conteudoGroup.substr(0, conteudoGroup.find(":"));
			}
			if(conteudoGroup == codGrupo){
				arqTxtResult.open("resultado.txt", fstream::in |fstream::out |fstream::ate);
				arqTxtResult << "Usuario : " << " Codigo : " << conteudoGroup << "Grupo : " << endl;
				arqTxtResult .close();
			}
			
		}
		arqTxtGroup.close();
	}
	return 0;
}
------------------------ outra versão ----------------
#include <iostream>
#include <istream>
#include <fstream>
#include <string>
#include <vector>
using namespace std;

vector<string> explode(string separador, string frase) {
  int prox = separador.size();
  vector<string> ret;
  string::size_type ini, fim;
  ini = fim = 0;
  string aux;
  while (true){
    fim = frase.find(separador, ini);
    if (fim == string::npos){
      aux = frase.substr(ini, frase.size() - ini);
      if(aux.size()>0)ret.push_back(aux);
      break;
    }
    aux= frase.substr(ini, fim - ini); 
    if(aux.size()>0)ret.push_back(aux);
    ini = fim + prox;
  }
  return ret;
}

int main (int argc, char *argv[]){
  //Declarando arquivos usados.
  fstream arqEntrada;
  fstream arqSaida;
  fstream arqComparador;

  //Abrindo arquivos.
  arqEntrada.open("/etc/passwd", ios_base::in);
  arqSaida.open("resultado.txt", ios_base::out); 
  arqComparador.open("/etc/group", ios_base::in);

  //STRINGS E VETORES USADOS
  string usuario;
  string codigo;
  string grupo;
  string txtRecebido;
  string txtTotal;
  vector<string> sep;
  vector<string> sepInt;

  //Marcar texto para Explode
  while(arqEntrada.good()){
    getline(arqEntrada, txtRecebido);
    txtTotal+=txtRecebido+"!!!!!"; //Salva o texto
  }  
  
  //Fazer explode externo, e usar loop interno para pegar os dados desejados.
  sep = explode("!!!!!", txtTotal);
  for(int i=0; i<sep.size(); i++){
    sepInt = explode(":", sep[i]);
    for(int j=0; j<sepInt.size(); j++){
      if(j==0) cout<<sepInt[j]<<endl;
      if(j==2) cout<<sepInt[j]<<endl;
    }
  }
  sep.clear();
  sepInt.clear();
  arqComparador.close();
  arqEntrada.close();
  arqSaida.close();
  return 0;
}


-----------------------------------------------------------------------------------------------------------
8 - Listar as informações de usuário, código e grupo armazenados no arquivo /home/exercicio/resultado.txt em formato JSON

Abrir o arquivo ‘/home/exercicio/resultado.txt’ e mostrar na tela o resultado em formato JSON

-----------------------------------------------------------------------------
9 - Retornar dados da consulta em banco de dados em formato JSON

Realizar uma consulta qualquer em banco de dados MySQL e mostrar o resultado na tela em formato JSON.

Dica:
veja sobre a library jsonCPP








